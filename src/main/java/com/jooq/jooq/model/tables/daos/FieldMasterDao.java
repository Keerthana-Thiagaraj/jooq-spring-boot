/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables.daos;


import com.jooq.jooq.model.tables.FieldMaster;
import com.jooq.jooq.model.tables.records.FieldMasterRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class FieldMasterDao extends DAOImpl<FieldMasterRecord, com.jooq.jooq.model.tables.pojos.FieldMaster, Integer> {

    /**
     * Create a new FieldMasterDao without any configuration
     */
    public FieldMasterDao() {
        super(FieldMaster.FIELD_MASTER, com.jooq.jooq.model.tables.pojos.FieldMaster.class);
    }

    /**
     * Create a new FieldMasterDao with an attached configuration
     */
    @Autowired
    public FieldMasterDao(Configuration configuration) {
        super(FieldMaster.FIELD_MASTER, com.jooq.jooq.model.tables.pojos.FieldMaster.class, configuration);
    }

    @Override
    public Integer getId(com.jooq.jooq.model.tables.pojos.FieldMaster object) {
        return object.getSno();
    }

    /**
     * Fetch records that have <code>sno BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfSno(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.SNO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sno IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchBySno(Integer... values) {
        return fetch(FieldMaster.FIELD_MASTER.SNO, values);
    }

    /**
     * Fetch a unique record that has <code>sno = value</code>
     */
    public com.jooq.jooq.model.tables.pojos.FieldMaster fetchOneBySno(Integer value) {
        return fetchOne(FieldMaster.FIELD_MASTER.SNO, value);
    }

    /**
     * Fetch records that have <code>tab_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfTabId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.TAB_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tab_id IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByTabId(Integer... values) {
        return fetch(FieldMaster.FIELD_MASTER.TAB_ID, values);
    }

    /**
     * Fetch records that have <code>form_field_lable BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfFormFieldLable(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.FORM_FIELD_LABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>form_field_lable IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByFormFieldLable(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.FORM_FIELD_LABLE, values);
    }

    /**
     * Fetch records that have <code>form_field_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfFormFieldId(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.FORM_FIELD_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>form_field_id IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByFormFieldId(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.FORM_FIELD_ID, values);
    }

    /**
     * Fetch records that have <code>RPMV BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfRpmv(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.RPMV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>RPMV IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByRpmv(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.RPMV, values);
    }

    /**
     * Fetch records that have <code>FRMR BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfFrmr(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.FRMR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FRMR IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByFrmr(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.FRMR, values);
    }

    /**
     * Fetch records that have <code>ATPY BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfAtpy(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.ATPY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ATPY IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByAtpy(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.ATPY, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByStatus(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.STATUS, values);
    }

    /**
     * Fetch records that have <code>field_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfFieldType(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.FIELD_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>field_type IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByFieldType(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.FIELD_TYPE, values);
    }

    /**
     * Fetch records that have <code>field_value BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchRangeOfFieldValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldMaster.FIELD_MASTER.FIELD_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>field_value IN (values)</code>
     */
    public List<com.jooq.jooq.model.tables.pojos.FieldMaster> fetchByFieldValue(String... values) {
        return fetch(FieldMaster.FIELD_MASTER.FIELD_VALUE, values);
    }
}
