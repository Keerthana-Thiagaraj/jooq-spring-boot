/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables.records;


import com.jooq.jooq.model.tables.CircularLanguage;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CircularLanguageRecord extends UpdatableRecordImpl<CircularLanguageRecord> implements Record2<Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>vendor_portal_pbx.circular_language.ID</code>.
     */
    public CircularLanguageRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>vendor_portal_pbx.circular_language.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>vendor_portal_pbx.circular_language.LANG_NAME</code>.
     */
    public CircularLanguageRecord setLangName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>vendor_portal_pbx.circular_language.LANG_NAME</code>.
     */
    public String getLangName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CircularLanguage.CIRCULAR_LANGUAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return CircularLanguage.CIRCULAR_LANGUAGE.LANG_NAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getLangName();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getLangName();
    }

    @Override
    public CircularLanguageRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CircularLanguageRecord value2(String value) {
        setLangName(value);
        return this;
    }

    @Override
    public CircularLanguageRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CircularLanguageRecord
     */
    public CircularLanguageRecord() {
        super(CircularLanguage.CIRCULAR_LANGUAGE);
    }

    /**
     * Create a detached, initialised CircularLanguageRecord
     */
    public CircularLanguageRecord(Integer id, String langName) {
        super(CircularLanguage.CIRCULAR_LANGUAGE);

        setId(id);
        setLangName(langName);
    }
}
