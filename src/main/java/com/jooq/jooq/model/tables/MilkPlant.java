/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.MilkPlantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MilkPlant extends TableImpl<MilkPlantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.milk_plant</code>
     */
    public static final MilkPlant MILK_PLANT = new MilkPlant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MilkPlantRecord> getRecordType() {
        return MilkPlantRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.milk_plant.PLANT</code>.
     */
    public final TableField<MilkPlantRecord, String> PLANT = createField(DSL.name("PLANT"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.PLANT_DESC</code>.
     */
    public final TableField<MilkPlantRecord, String> PLANT_DESC = createField(DSL.name("PLANT_DESC"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.STATUS</code>.
     */
    public final TableField<MilkPlantRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("A", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.CREATED_BY</code>.
     */
    public final TableField<MilkPlantRecord, Integer> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.CREATED_ON</code>.
     */
    public final TableField<MilkPlantRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.LAST_CHANGED_BY</code>.
     */
    public final TableField<MilkPlantRecord, Integer> LAST_CHANGED_BY = createField(DSL.name("LAST_CHANGED_BY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.LAST_CHANGED_ON</code>.
     */
    public final TableField<MilkPlantRecord, LocalDateTime> LAST_CHANGED_ON = createField(DSL.name("LAST_CHANGED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.ADDRESS</code>.
     */
    public final TableField<MilkPlantRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.PINCODE</code>.
     */
    public final TableField<MilkPlantRecord, String> PINCODE = createField(DSL.name("PINCODE"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.CITY</code>.
     */
    public final TableField<MilkPlantRecord, String> CITY = createField(DSL.name("CITY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.GST_NO</code>.
     */
    public final TableField<MilkPlantRecord, String> GST_NO = createField(DSL.name("GST_NO"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>vendor_portal_pbx.milk_plant.CIN_NO</code>.
     */
    public final TableField<MilkPlantRecord, String> CIN_NO = createField(DSL.name("CIN_NO"), SQLDataType.VARCHAR(15), this, "");

    private MilkPlant(Name alias, Table<MilkPlantRecord> aliased) {
        this(alias, aliased, null);
    }

    private MilkPlant(Name alias, Table<MilkPlantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.milk_plant</code> table reference
     */
    public MilkPlant(String alias) {
        this(DSL.name(alias), MILK_PLANT);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.milk_plant</code> table reference
     */
    public MilkPlant(Name alias) {
        this(alias, MILK_PLANT);
    }

    /**
     * Create a <code>vendor_portal_pbx.milk_plant</code> table reference
     */
    public MilkPlant() {
        this(DSL.name("milk_plant"), null);
    }

    public <O extends Record> MilkPlant(Table<O> child, ForeignKey<O, MilkPlantRecord> key) {
        super(child, key, MILK_PLANT);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<MilkPlantRecord> getPrimaryKey() {
        return Keys.KEY_MILK_PLANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<MilkPlantRecord>> getKeys() {
        return Arrays.<UniqueKey<MilkPlantRecord>>asList(Keys.KEY_MILK_PLANT_PRIMARY);
    }

    @Override
    public MilkPlant as(String alias) {
        return new MilkPlant(DSL.name(alias), this);
    }

    @Override
    public MilkPlant as(Name alias) {
        return new MilkPlant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MilkPlant rename(String name) {
        return new MilkPlant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MilkPlant rename(Name name) {
        return new MilkPlant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, Integer, LocalDateTime, Integer, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
