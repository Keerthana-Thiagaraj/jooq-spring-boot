/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.FiscalYearRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FiscalYear extends TableImpl<FiscalYearRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.fiscal_year</code>
     */
    public static final FiscalYear FISCAL_YEAR = new FiscalYear();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FiscalYearRecord> getRecordType() {
        return FiscalYearRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.fiscal_year.ID</code>.
     */
    public final TableField<FiscalYearRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.fiscal_year.FISCAL_YEAR_VAL</code>.
     */
    public final TableField<FiscalYearRecord, String> FISCAL_YEAR_VAL = createField(DSL.name("FISCAL_YEAR_VAL"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.fiscal_year.FISCAL_YEAR_NAME</code>.
     */
    public final TableField<FiscalYearRecord, String> FISCAL_YEAR_NAME = createField(DSL.name("FISCAL_YEAR_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.fiscal_year.STATUS</code>.
     */
    public final TableField<FiscalYearRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    private FiscalYear(Name alias, Table<FiscalYearRecord> aliased) {
        this(alias, aliased, null);
    }

    private FiscalYear(Name alias, Table<FiscalYearRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.fiscal_year</code> table reference
     */
    public FiscalYear(String alias) {
        this(DSL.name(alias), FISCAL_YEAR);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.fiscal_year</code> table reference
     */
    public FiscalYear(Name alias) {
        this(alias, FISCAL_YEAR);
    }

    /**
     * Create a <code>vendor_portal_pbx.fiscal_year</code> table reference
     */
    public FiscalYear() {
        this(DSL.name("fiscal_year"), null);
    }

    public <O extends Record> FiscalYear(Table<O> child, ForeignKey<O, FiscalYearRecord> key) {
        super(child, key, FISCAL_YEAR);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<FiscalYearRecord> getPrimaryKey() {
        return Keys.KEY_FISCAL_YEAR_PRIMARY;
    }

    @Override
    public List<UniqueKey<FiscalYearRecord>> getKeys() {
        return Arrays.<UniqueKey<FiscalYearRecord>>asList(Keys.KEY_FISCAL_YEAR_PRIMARY);
    }

    @Override
    public FiscalYear as(String alias) {
        return new FiscalYear(DSL.name(alias), this);
    }

    @Override
    public FiscalYear as(Name alias) {
        return new FiscalYear(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FiscalYear rename(String name) {
        return new FiscalYear(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FiscalYear rename(Name name) {
        return new FiscalYear(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
