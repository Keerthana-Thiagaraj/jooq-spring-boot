/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.CircularUploadRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CircularUpload extends TableImpl<CircularUploadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.circular_upload</code>
     */
    public static final CircularUpload CIRCULAR_UPLOAD = new CircularUpload();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CircularUploadRecord> getRecordType() {
        return CircularUploadRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.circular_upload.ID</code>.
     */
    public final TableField<CircularUploadRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.COMP_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> COMP_CODE = createField(DSL.name("COMP_CODE"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.COUNTRY_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> COUNTRY_CODE = createField(DSL.name("COUNTRY_CODE"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.ACC_GRP_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> ACC_GRP_CODE = createField(DSL.name("ACC_GRP_CODE"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.CIR_OPTION</code>.
     */
    public final TableField<CircularUploadRecord, String> CIR_OPTION = createField(DSL.name("CIR_OPTION"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.STATE_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> STATE_CODE = createField(DSL.name("STATE_CODE"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.DISTRICT_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> DISTRICT_CODE = createField(DSL.name("DISTRICT_CODE"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.PLANT_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> PLANT_CODE = createField(DSL.name("PLANT_CODE"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.SOCIETY</code>.
     */
    public final TableField<CircularUploadRecord, String> SOCIETY = createField(DSL.name("SOCIETY"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.USER</code>.
     */
    public final TableField<CircularUploadRecord, String> USER = createField(DSL.name("USER"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.CIRCULAR_ID</code>.
     */
    public final TableField<CircularUploadRecord, String> CIRCULAR_ID = createField(DSL.name("CIRCULAR_ID"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.LANG_ID</code>.
     */
    public final TableField<CircularUploadRecord, String> LANG_ID = createField(DSL.name("LANG_ID"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.FARMER_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> FARMER_CODE = createField(DSL.name("FARMER_CODE"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.HMB_CODE</code>.
     */
    public final TableField<CircularUploadRecord, String> HMB_CODE = createField(DSL.name("HMB_CODE"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.FILE_NAME</code>.
     */
    public final TableField<CircularUploadRecord, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.FILE_URL</code>.
     */
    public final TableField<CircularUploadRecord, String> FILE_URL = createField(DSL.name("FILE_URL"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.FILE_TYPE</code>.
     */
    public final TableField<CircularUploadRecord, String> FILE_TYPE = createField(DSL.name("FILE_TYPE"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.NOTIFICATION</code>.
     */
    public final TableField<CircularUploadRecord, String> NOTIFICATION = createField(DSL.name("NOTIFICATION"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.STATUS</code>.
     */
    public final TableField<CircularUploadRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.FROM_DATE</code>.
     */
    public final TableField<CircularUploadRecord, LocalDateTime> FROM_DATE = createField(DSL.name("FROM_DATE"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.TO_DATE</code>.
     */
    public final TableField<CircularUploadRecord, LocalDateTime> TO_DATE = createField(DSL.name("TO_DATE"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.CREATED_BY</code>.
     */
    public final TableField<CircularUploadRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_upload.CREATED_ON</code>.
     */
    public final TableField<CircularUploadRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    private CircularUpload(Name alias, Table<CircularUploadRecord> aliased) {
        this(alias, aliased, null);
    }

    private CircularUpload(Name alias, Table<CircularUploadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_upload</code> table reference
     */
    public CircularUpload(String alias) {
        this(DSL.name(alias), CIRCULAR_UPLOAD);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_upload</code> table reference
     */
    public CircularUpload(Name alias) {
        this(alias, CIRCULAR_UPLOAD);
    }

    /**
     * Create a <code>vendor_portal_pbx.circular_upload</code> table reference
     */
    public CircularUpload() {
        this(DSL.name("circular_upload"), null);
    }

    public <O extends Record> CircularUpload(Table<O> child, ForeignKey<O, CircularUploadRecord> key) {
        super(child, key, CIRCULAR_UPLOAD);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public Identity<CircularUploadRecord, Integer> getIdentity() {
        return (Identity<CircularUploadRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CircularUploadRecord> getPrimaryKey() {
        return Keys.KEY_CIRCULAR_UPLOAD_PRIMARY;
    }

    @Override
    public List<UniqueKey<CircularUploadRecord>> getKeys() {
        return Arrays.<UniqueKey<CircularUploadRecord>>asList(Keys.KEY_CIRCULAR_UPLOAD_PRIMARY);
    }

    @Override
    public CircularUpload as(String alias) {
        return new CircularUpload(DSL.name(alias), this);
    }

    @Override
    public CircularUpload as(Name alias) {
        return new CircularUpload(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularUpload rename(String name) {
        return new CircularUpload(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularUpload rename(Name name) {
        return new CircularUpload(name, null);
    }
}
