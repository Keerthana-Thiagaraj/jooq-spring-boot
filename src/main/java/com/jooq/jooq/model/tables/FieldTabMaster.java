/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.JooqDemo;
import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.tables.records.FieldTabMasterRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldTabMaster extends TableImpl<FieldTabMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_demo.field_tab_master</code>
     */
    public static final FieldTabMaster FIELD_TAB_MASTER = new FieldTabMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldTabMasterRecord> getRecordType() {
        return FieldTabMasterRecord.class;
    }

    /**
     * The column <code>jooq_demo.field_tab_master.tab_id</code>.
     */
    public final TableField<FieldTabMasterRecord, Integer> TAB_ID = createField(DSL.name("tab_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_demo.field_tab_master.tab_lable</code>.
     */
    public final TableField<FieldTabMasterRecord, String> TAB_LABLE = createField(DSL.name("tab_lable"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.field_tab_master.tab_name</code>.
     */
    public final TableField<FieldTabMasterRecord, String> TAB_NAME = createField(DSL.name("tab_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.field_tab_master.status</code>.
     */
    public final TableField<FieldTabMasterRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45), this, "");

    private FieldTabMaster(Name alias, Table<FieldTabMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldTabMaster(Name alias, Table<FieldTabMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_demo.field_tab_master</code> table reference
     */
    public FieldTabMaster(String alias) {
        this(DSL.name(alias), FIELD_TAB_MASTER);
    }

    /**
     * Create an aliased <code>jooq_demo.field_tab_master</code> table reference
     */
    public FieldTabMaster(Name alias) {
        this(alias, FIELD_TAB_MASTER);
    }

    /**
     * Create a <code>jooq_demo.field_tab_master</code> table reference
     */
    public FieldTabMaster() {
        this(DSL.name("field_tab_master"), null);
    }

    public <O extends Record> FieldTabMaster(Table<O> child, ForeignKey<O, FieldTabMasterRecord> key) {
        super(child, key, FIELD_TAB_MASTER);
    }

    @Override
    public Schema getSchema() {
        return JooqDemo.JOOQ_DEMO;
    }

    @Override
    public Identity<FieldTabMasterRecord, Integer> getIdentity() {
        return (Identity<FieldTabMasterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FieldTabMasterRecord> getPrimaryKey() {
        return Keys.KEY_FIELD_TAB_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<FieldTabMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldTabMasterRecord>>asList(Keys.KEY_FIELD_TAB_MASTER_PRIMARY);
    }

    @Override
    public FieldTabMaster as(String alias) {
        return new FieldTabMaster(DSL.name(alias), this);
    }

    @Override
    public FieldTabMaster as(Name alias) {
        return new FieldTabMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldTabMaster rename(String name) {
        return new FieldTabMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldTabMaster rename(Name name) {
        return new FieldTabMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
