/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.VisitorRegisterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VisitorRegister extends TableImpl<VisitorRegisterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.visitor_register</code>
     */
    public static final VisitorRegister VISITOR_REGISTER = new VisitorRegister();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitorRegisterRecord> getRecordType() {
        return VisitorRegisterRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.visitor_register.COMP_CODE</code>.
     */
    public final TableField<VisitorRegisterRecord, String> COMP_CODE = createField(DSL.name("COMP_CODE"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.CUSTOMER_CODE</code>.
     */
    public final TableField<VisitorRegisterRecord, String> CUSTOMER_CODE = createField(DSL.name("CUSTOMER_CODE"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.CUSTOMER_NAME</code>.
     */
    public final TableField<VisitorRegisterRecord, String> CUSTOMER_NAME = createField(DSL.name("CUSTOMER_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.EMPLOYEE_CODE</code>.
     */
    public final TableField<VisitorRegisterRecord, String> EMPLOYEE_CODE = createField(DSL.name("EMPLOYEE_CODE"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.EMPLOYEE_NAME</code>.
     */
    public final TableField<VisitorRegisterRecord, String> EMPLOYEE_NAME = createField(DSL.name("EMPLOYEE_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.ENTRY_DATE</code>.
     */
    public final TableField<VisitorRegisterRecord, LocalDateTime> ENTRY_DATE = createField(DSL.name("ENTRY_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.VISITOR_CATEGORY</code>.
     */
    public final TableField<VisitorRegisterRecord, String> VISITOR_CATEGORY = createField(DSL.name("VISITOR_CATEGORY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.PHONE_NO</code>.
     */
    public final TableField<VisitorRegisterRecord, String> PHONE_NO = createField(DSL.name("PHONE_NO"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.PURPOSE_OF_VISIT</code>.
     */
    public final TableField<VisitorRegisterRecord, String> PURPOSE_OF_VISIT = createField(DSL.name("PURPOSE_OF_VISIT"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.visitor_register.REMARKS</code>.
     */
    public final TableField<VisitorRegisterRecord, String> REMARKS = createField(DSL.name("REMARKS"), SQLDataType.VARCHAR(45), this, "");

    private VisitorRegister(Name alias, Table<VisitorRegisterRecord> aliased) {
        this(alias, aliased, null);
    }

    private VisitorRegister(Name alias, Table<VisitorRegisterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.visitor_register</code> table reference
     */
    public VisitorRegister(String alias) {
        this(DSL.name(alias), VISITOR_REGISTER);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.visitor_register</code> table reference
     */
    public VisitorRegister(Name alias) {
        this(alias, VISITOR_REGISTER);
    }

    /**
     * Create a <code>vendor_portal_pbx.visitor_register</code> table reference
     */
    public VisitorRegister() {
        this(DSL.name("visitor_register"), null);
    }

    public <O extends Record> VisitorRegister(Table<O> child, ForeignKey<O, VisitorRegisterRecord> key) {
        super(child, key, VISITOR_REGISTER);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<VisitorRegisterRecord> getPrimaryKey() {
        return Keys.KEY_VISITOR_REGISTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<VisitorRegisterRecord>> getKeys() {
        return Arrays.<UniqueKey<VisitorRegisterRecord>>asList(Keys.KEY_VISITOR_REGISTER_PRIMARY);
    }

    @Override
    public VisitorRegister as(String alias) {
        return new VisitorRegister(DSL.name(alias), this);
    }

    @Override
    public VisitorRegister as(Name alias) {
        return new VisitorRegister(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitorRegister rename(String name) {
        return new VisitorRegister(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitorRegister rename(Name name) {
        return new VisitorRegister(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, LocalDateTime, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
