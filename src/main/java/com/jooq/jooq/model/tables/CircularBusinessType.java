/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.CircularBusinessTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CircularBusinessType extends TableImpl<CircularBusinessTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.circular_business_type</code>
     */
    public static final CircularBusinessType CIRCULAR_BUSINESS_TYPE = new CircularBusinessType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CircularBusinessTypeRecord> getRecordType() {
        return CircularBusinessTypeRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.circular_business_type.ACC_GRP_CODE</code>.
     */
    public final TableField<CircularBusinessTypeRecord, String> ACC_GRP_CODE = createField(DSL.name("ACC_GRP_CODE"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_business_type.ACC_GRP_NAME</code>.
     */
    public final TableField<CircularBusinessTypeRecord, String> ACC_GRP_NAME = createField(DSL.name("ACC_GRP_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_business_type.CATEGORY</code>.
     */
    public final TableField<CircularBusinessTypeRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_business_type.OPTION_TYPE</code>.
     */
    public final TableField<CircularBusinessTypeRecord, String> OPTION_TYPE = createField(DSL.name("OPTION_TYPE"), SQLDataType.VARCHAR(105), this, "");

    private CircularBusinessType(Name alias, Table<CircularBusinessTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CircularBusinessType(Name alias, Table<CircularBusinessTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_business_type</code> table reference
     */
    public CircularBusinessType(String alias) {
        this(DSL.name(alias), CIRCULAR_BUSINESS_TYPE);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_business_type</code> table reference
     */
    public CircularBusinessType(Name alias) {
        this(alias, CIRCULAR_BUSINESS_TYPE);
    }

    /**
     * Create a <code>vendor_portal_pbx.circular_business_type</code> table reference
     */
    public CircularBusinessType() {
        this(DSL.name("circular_business_type"), null);
    }

    public <O extends Record> CircularBusinessType(Table<O> child, ForeignKey<O, CircularBusinessTypeRecord> key) {
        super(child, key, CIRCULAR_BUSINESS_TYPE);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<CircularBusinessTypeRecord> getPrimaryKey() {
        return Keys.KEY_CIRCULAR_BUSINESS_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CircularBusinessTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CircularBusinessTypeRecord>>asList(Keys.KEY_CIRCULAR_BUSINESS_TYPE_PRIMARY);
    }

    @Override
    public CircularBusinessType as(String alias) {
        return new CircularBusinessType(DSL.name(alias), this);
    }

    @Override
    public CircularBusinessType as(Name alias) {
        return new CircularBusinessType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularBusinessType rename(String name) {
        return new CircularBusinessType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularBusinessType rename(Name name) {
        return new CircularBusinessType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
