/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.FarmerTempRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmerTemp extends TableImpl<FarmerTempRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.farmer_temp</code>
     */
    public static final FarmerTemp FARMER_TEMP = new FarmerTemp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmerTempRecord> getRecordType() {
        return FarmerTempRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.farmer_temp.FARMER</code>.
     */
    public final TableField<FarmerTempRecord, String> FARMER = createField(DSL.name("FARMER"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_temp.MOBILE</code>.
     */
    public final TableField<FarmerTempRecord, String> MOBILE = createField(DSL.name("MOBILE"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_temp.PLANT</code>.
     */
    public final TableField<FarmerTempRecord, String> PLANT = createField(DSL.name("PLANT"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    private FarmerTemp(Name alias, Table<FarmerTempRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmerTemp(Name alias, Table<FarmerTempRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.farmer_temp</code> table reference
     */
    public FarmerTemp(String alias) {
        this(DSL.name(alias), FARMER_TEMP);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.farmer_temp</code> table reference
     */
    public FarmerTemp(Name alias) {
        this(alias, FARMER_TEMP);
    }

    /**
     * Create a <code>vendor_portal_pbx.farmer_temp</code> table reference
     */
    public FarmerTemp() {
        this(DSL.name("farmer_temp"), null);
    }

    public <O extends Record> FarmerTemp(Table<O> child, ForeignKey<O, FarmerTempRecord> key) {
        super(child, key, FARMER_TEMP);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<FarmerTempRecord> getPrimaryKey() {
        return Keys.KEY_FARMER_TEMP_PRIMARY;
    }

    @Override
    public List<UniqueKey<FarmerTempRecord>> getKeys() {
        return Arrays.<UniqueKey<FarmerTempRecord>>asList(Keys.KEY_FARMER_TEMP_PRIMARY);
    }

    @Override
    public FarmerTemp as(String alias) {
        return new FarmerTemp(DSL.name(alias), this);
    }

    @Override
    public FarmerTemp as(Name alias) {
        return new FarmerTemp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmerTemp rename(String name) {
        return new FarmerTemp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmerTemp rename(Name name) {
        return new FarmerTemp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
