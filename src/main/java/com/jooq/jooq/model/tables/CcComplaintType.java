/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.CcComplaintTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CcComplaintType extends TableImpl<CcComplaintTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.cc_complaint_type</code>
     */
    public static final CcComplaintType CC_COMPLAINT_TYPE = new CcComplaintType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CcComplaintTypeRecord> getRecordType() {
        return CcComplaintTypeRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.COMPLAINT_ID</code>.
     */
    public final TableField<CcComplaintTypeRecord, Integer> COMPLAINT_ID = createField(DSL.name("COMPLAINT_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.DIVISION</code>.
     */
    public final TableField<CcComplaintTypeRecord, String> DIVISION = createField(DSL.name("DIVISION"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.COMPLAINT_NAME</code>.
     */
    public final TableField<CcComplaintTypeRecord, String> COMPLAINT_NAME = createField(DSL.name("COMPLAINT_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.CREATED_BY</code>.
     */
    public final TableField<CcComplaintTypeRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.CREATED_ON</code>.
     */
    public final TableField<CcComplaintTypeRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.cc_complaint_type.STATUS</code>.
     */
    public final TableField<CcComplaintTypeRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(45), this, "");

    private CcComplaintType(Name alias, Table<CcComplaintTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CcComplaintType(Name alias, Table<CcComplaintTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.cc_complaint_type</code> table reference
     */
    public CcComplaintType(String alias) {
        this(DSL.name(alias), CC_COMPLAINT_TYPE);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.cc_complaint_type</code> table reference
     */
    public CcComplaintType(Name alias) {
        this(alias, CC_COMPLAINT_TYPE);
    }

    /**
     * Create a <code>vendor_portal_pbx.cc_complaint_type</code> table reference
     */
    public CcComplaintType() {
        this(DSL.name("cc_complaint_type"), null);
    }

    public <O extends Record> CcComplaintType(Table<O> child, ForeignKey<O, CcComplaintTypeRecord> key) {
        super(child, key, CC_COMPLAINT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<CcComplaintTypeRecord> getPrimaryKey() {
        return Keys.KEY_CC_COMPLAINT_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CcComplaintTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CcComplaintTypeRecord>>asList(Keys.KEY_CC_COMPLAINT_TYPE_PRIMARY);
    }

    @Override
    public CcComplaintType as(String alias) {
        return new CcComplaintType(DSL.name(alias), this);
    }

    @Override
    public CcComplaintType as(Name alias) {
        return new CcComplaintType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CcComplaintType rename(String name) {
        return new CcComplaintType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CcComplaintType rename(Name name) {
        return new CcComplaintType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
