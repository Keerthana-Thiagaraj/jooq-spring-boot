/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Indexes;
import com.jooq.jooq.model.JooqDemo;
import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.tables.records.FieldMasterRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldMaster extends TableImpl<FieldMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_demo.Field_master</code>
     */
    public static final FieldMaster FIELD_MASTER = new FieldMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldMasterRecord> getRecordType() {
        return FieldMasterRecord.class;
    }

    /**
     * The column <code>jooq_demo.Field_master.sno</code>.
     */
    public final TableField<FieldMasterRecord, Integer> SNO = createField(DSL.name("sno"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_demo.Field_master.tab_id</code>.
     */
    public final TableField<FieldMasterRecord, Integer> TAB_ID = createField(DSL.name("tab_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jooq_demo.Field_master.form_field_lable</code>.
     */
    public final TableField<FieldMasterRecord, String> FORM_FIELD_LABLE = createField(DSL.name("form_field_lable"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.form_field_id</code>.
     */
    public final TableField<FieldMasterRecord, String> FORM_FIELD_ID = createField(DSL.name("form_field_id"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.RPMV</code>.
     */
    public final TableField<FieldMasterRecord, String> RPMV = createField(DSL.name("RPMV"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.FRMR</code>.
     */
    public final TableField<FieldMasterRecord, String> FRMR = createField(DSL.name("FRMR"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.ATPY</code>.
     */
    public final TableField<FieldMasterRecord, String> ATPY = createField(DSL.name("ATPY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.status</code>.
     */
    public final TableField<FieldMasterRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.field_type</code>.
     */
    public final TableField<FieldMasterRecord, String> FIELD_TYPE = createField(DSL.name("field_type"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.Field_master.field_value</code>.
     */
    public final TableField<FieldMasterRecord, String> FIELD_VALUE = createField(DSL.name("field_value"), SQLDataType.VARCHAR(45), this, "");

    private FieldMaster(Name alias, Table<FieldMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldMaster(Name alias, Table<FieldMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_demo.Field_master</code> table reference
     */
    public FieldMaster(String alias) {
        this(DSL.name(alias), FIELD_MASTER);
    }

    /**
     * Create an aliased <code>jooq_demo.Field_master</code> table reference
     */
    public FieldMaster(Name alias) {
        this(alias, FIELD_MASTER);
    }

    /**
     * Create a <code>jooq_demo.Field_master</code> table reference
     */
    public FieldMaster() {
        this(DSL.name("Field_master"), null);
    }

    public <O extends Record> FieldMaster(Table<O> child, ForeignKey<O, FieldMasterRecord> key) {
        super(child, key, FIELD_MASTER);
    }

    @Override
    public Schema getSchema() {
        return JooqDemo.JOOQ_DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FIELD_MASTER_FK_TAB_MASTER_IDX);
    }

    @Override
    public Identity<FieldMasterRecord, Integer> getIdentity() {
        return (Identity<FieldMasterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FieldMasterRecord> getPrimaryKey() {
        return Keys.KEY_FIELD_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<FieldMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldMasterRecord>>asList(Keys.KEY_FIELD_MASTER_PRIMARY);
    }

    @Override
    public List<ForeignKey<FieldMasterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FieldMasterRecord, ?>>asList(Keys.FK_FIELD_MASTER);
    }

    private transient FieldTabMaster _fieldTabMaster;

    public FieldTabMaster fieldTabMaster() {
        if (_fieldTabMaster == null)
            _fieldTabMaster = new FieldTabMaster(this, Keys.FK_FIELD_MASTER);

        return _fieldTabMaster;
    }

    @Override
    public FieldMaster as(String alias) {
        return new FieldMaster(DSL.name(alias), this);
    }

    @Override
    public FieldMaster as(Name alias) {
        return new FieldMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldMaster rename(String name) {
        return new FieldMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldMaster rename(Name name) {
        return new FieldMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
