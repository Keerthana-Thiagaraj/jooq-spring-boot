/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Indexes;
import com.jooq.jooq.model.JooqDemo;
import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.tables.records.CityMasterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityMaster extends TableImpl<CityMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_demo.city_master</code>
     */
    public static final CityMaster CITY_MASTER = new CityMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CityMasterRecord> getRecordType() {
        return CityMasterRecord.class;
    }

    /**
     * The column <code>jooq_demo.city_master.ID</code>.
     */
    public final TableField<CityMasterRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_demo.city_master.CITY</code>.
     */
    public final TableField<CityMasterRecord, String> CITY = createField(DSL.name("CITY"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>jooq_demo.city_master.STATE_ID</code>.
     */
    public final TableField<CityMasterRecord, Integer> STATE_ID = createField(DSL.name("STATE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq_demo.city_master.STATUS</code>.
     */
    public final TableField<CityMasterRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>jooq_demo.city_master.CREATED_BY</code>.
     */
    public final TableField<CityMasterRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.city_master.CREATED_ON</code>.
     */
    public final TableField<CityMasterRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    private CityMaster(Name alias, Table<CityMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CityMaster(Name alias, Table<CityMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_demo.city_master</code> table reference
     */
    public CityMaster(String alias) {
        this(DSL.name(alias), CITY_MASTER);
    }

    /**
     * Create an aliased <code>jooq_demo.city_master</code> table reference
     */
    public CityMaster(Name alias) {
        this(alias, CITY_MASTER);
    }

    /**
     * Create a <code>jooq_demo.city_master</code> table reference
     */
    public CityMaster() {
        this(DSL.name("city_master"), null);
    }

    public <O extends Record> CityMaster(Table<O> child, ForeignKey<O, CityMasterRecord> key) {
        super(child, key, CITY_MASTER);
    }

    @Override
    public Schema getSchema() {
        return JooqDemo.JOOQ_DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CITY_MASTER_FK_STATE_MASTER_IDX);
    }

    @Override
    public Identity<CityMasterRecord, Integer> getIdentity() {
        return (Identity<CityMasterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CityMasterRecord> getPrimaryKey() {
        return Keys.KEY_CITY_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CityMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<CityMasterRecord>>asList(Keys.KEY_CITY_MASTER_PRIMARY);
    }

    @Override
    public CityMaster as(String alias) {
        return new CityMaster(DSL.name(alias), this);
    }

    @Override
    public CityMaster as(Name alias) {
        return new CityMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CityMaster rename(String name) {
        return new CityMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CityMaster rename(Name name) {
        return new CityMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
