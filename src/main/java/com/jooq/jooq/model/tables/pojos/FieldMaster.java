/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables.pojos;


import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "Field_master",
    schema = "jooq_demo",
    uniqueConstraints = {
        @UniqueConstraint(name = "KEY_Field_master_PRIMARY", columnNames = { "sno" })
    },
    indexes = {
        @Index(name = "fk_tab_master_idx", columnList = "tab_id ASC")
    }
)
public class FieldMaster implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer sno;
    private Integer tabId;
    private String  formFieldLable;
    private String  formFieldId;
    private String  rpmv;
    private String  frmr;
    private String  atpy;
    private String  status;
    private String  fieldType;
    private String  fieldValue;

    public FieldMaster() {}

    public FieldMaster(FieldMaster value) {
        this.sno = value.sno;
        this.tabId = value.tabId;
        this.formFieldLable = value.formFieldLable;
        this.formFieldId = value.formFieldId;
        this.rpmv = value.rpmv;
        this.frmr = value.frmr;
        this.atpy = value.atpy;
        this.status = value.status;
        this.fieldType = value.fieldType;
        this.fieldValue = value.fieldValue;
    }

    public FieldMaster(
        Integer sno,
        Integer tabId,
        String  formFieldLable,
        String  formFieldId,
        String  rpmv,
        String  frmr,
        String  atpy,
        String  status,
        String  fieldType,
        String  fieldValue
    ) {
        this.sno = sno;
        this.tabId = tabId;
        this.formFieldLable = formFieldLable;
        this.formFieldId = formFieldId;
        this.rpmv = rpmv;
        this.frmr = frmr;
        this.atpy = atpy;
        this.status = status;
        this.fieldType = fieldType;
        this.fieldValue = fieldValue;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.sno</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "sno", nullable = false, precision = 10)
    public Integer getSno() {
        return this.sno;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.sno</code>.
     */
    public FieldMaster setSno(Integer sno) {
        this.sno = sno;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.tab_id</code>.
     */
    @Column(name = "tab_id", precision = 10)
    public Integer getTabId() {
        return this.tabId;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.tab_id</code>.
     */
    public FieldMaster setTabId(Integer tabId) {
        this.tabId = tabId;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.form_field_lable</code>.
     */
    @Column(name = "form_field_lable", length = 45)
        @Size(max = 45)
    public String getFormFieldLable() {
        return this.formFieldLable;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.form_field_lable</code>.
     */
    public FieldMaster setFormFieldLable(String formFieldLable) {
        this.formFieldLable = formFieldLable;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.form_field_id</code>.
     */
    @Column(name = "form_field_id", length = 45)
        @Size(max = 45)
    public String getFormFieldId() {
        return this.formFieldId;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.form_field_id</code>.
     */
    public FieldMaster setFormFieldId(String formFieldId) {
        this.formFieldId = formFieldId;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.RPMV</code>.
     */
    @Column(name = "RPMV", length = 45)
    @Size(max = 45)
    public String getRpmv() {
        return this.rpmv;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.RPMV</code>.
     */
    public FieldMaster setRpmv(String rpmv) {
        this.rpmv = rpmv;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.FRMR</code>.
     */
    @Column(name = "FRMR", length = 45)
    @Size(max = 45)
    public String getFrmr() {
        return this.frmr;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.FRMR</code>.
     */
    public FieldMaster setFrmr(String frmr) {
        this.frmr = frmr;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.ATPY</code>.
     */
    @Column(name = "ATPY", length = 45)
    @Size(max = 45)
    public String getAtpy() {
        return this.atpy;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.ATPY</code>.
     */
    public FieldMaster setAtpy(String atpy) {
        this.atpy = atpy;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.status</code>.
     */
    @Column(name = "status", length = 45)
    @Size(max = 45)
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.status</code>.
     */
    public FieldMaster setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.field_type</code>.
     */
    @Column(name = "field_type", length = 45)
    @Size(max = 45)
    public String getFieldType() {
        return this.fieldType;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.field_type</code>.
     */
    public FieldMaster setFieldType(String fieldType) {
        this.fieldType = fieldType;
        return this;
    }

    /**
     * Getter for <code>jooq_demo.Field_master.field_value</code>.
     */
    @Column(name = "field_value", length = 45)
    @Size(max = 45)
    public String getFieldValue() {
        return this.fieldValue;
    }

    /**
     * Setter for <code>jooq_demo.Field_master.field_value</code>.
     */
    public FieldMaster setFieldValue(String fieldValue) {
        this.fieldValue = fieldValue;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final FieldMaster other = (FieldMaster) obj;
        if (sno == null) {
            if (other.sno != null)
                return false;
        }
        else if (!sno.equals(other.sno))
            return false;
        if (tabId == null) {
            if (other.tabId != null)
                return false;
        }
        else if (!tabId.equals(other.tabId))
            return false;
        if (formFieldLable == null) {
            if (other.formFieldLable != null)
                return false;
        }
        else if (!formFieldLable.equals(other.formFieldLable))
            return false;
        if (formFieldId == null) {
            if (other.formFieldId != null)
                return false;
        }
        else if (!formFieldId.equals(other.formFieldId))
            return false;
        if (rpmv == null) {
            if (other.rpmv != null)
                return false;
        }
        else if (!rpmv.equals(other.rpmv))
            return false;
        if (frmr == null) {
            if (other.frmr != null)
                return false;
        }
        else if (!frmr.equals(other.frmr))
            return false;
        if (atpy == null) {
            if (other.atpy != null)
                return false;
        }
        else if (!atpy.equals(other.atpy))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        if (fieldType == null) {
            if (other.fieldType != null)
                return false;
        }
        else if (!fieldType.equals(other.fieldType))
            return false;
        if (fieldValue == null) {
            if (other.fieldValue != null)
                return false;
        }
        else if (!fieldValue.equals(other.fieldValue))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.sno == null) ? 0 : this.sno.hashCode());
        result = prime * result + ((this.tabId == null) ? 0 : this.tabId.hashCode());
        result = prime * result + ((this.formFieldLable == null) ? 0 : this.formFieldLable.hashCode());
        result = prime * result + ((this.formFieldId == null) ? 0 : this.formFieldId.hashCode());
        result = prime * result + ((this.rpmv == null) ? 0 : this.rpmv.hashCode());
        result = prime * result + ((this.frmr == null) ? 0 : this.frmr.hashCode());
        result = prime * result + ((this.atpy == null) ? 0 : this.atpy.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.fieldType == null) ? 0 : this.fieldType.hashCode());
        result = prime * result + ((this.fieldValue == null) ? 0 : this.fieldValue.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FieldMaster (");

        sb.append(sno);
        sb.append(", ").append(tabId);
        sb.append(", ").append(formFieldLable);
        sb.append(", ").append(formFieldId);
        sb.append(", ").append(rpmv);
        sb.append(", ").append(frmr);
        sb.append(", ").append(atpy);
        sb.append(", ").append(status);
        sb.append(", ").append(fieldType);
        sb.append(", ").append(fieldValue);

        sb.append(")");
        return sb.toString();
    }
}
