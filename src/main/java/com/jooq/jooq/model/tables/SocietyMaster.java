/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.SocietyMasterRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SocietyMaster extends TableImpl<SocietyMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.society_master</code>
     */
    public static final SocietyMaster SOCIETY_MASTER = new SocietyMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SocietyMasterRecord> getRecordType() {
        return SocietyMasterRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.society_master.PLANT</code>.
     */
    public final TableField<SocietyMasterRecord, String> PLANT = createField(DSL.name("PLANT"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.SOCIETY</code>.
     */
    public final TableField<SocietyMasterRecord, String> SOCIETY = createField(DSL.name("SOCIETY"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.PLANT_NAME</code>.
     */
    public final TableField<SocietyMasterRecord, String> PLANT_NAME = createField(DSL.name("PLANT_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.SOCIETY_NAME</code>.
     */
    public final TableField<SocietyMasterRecord, String> SOCIETY_NAME = createField(DSL.name("SOCIETY_NAME"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.DATAB</code>.
     */
    public final TableField<SocietyMasterRecord, LocalDate> DATAB = createField(DSL.name("DATAB"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.DATBI</code>.
     */
    public final TableField<SocietyMasterRecord, LocalDate> DATBI = createField(DSL.name("DATBI"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>vendor_portal_pbx.society_master.STATUS</code>.
     */
    public final TableField<SocietyMasterRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    private SocietyMaster(Name alias, Table<SocietyMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private SocietyMaster(Name alias, Table<SocietyMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.society_master</code> table reference
     */
    public SocietyMaster(String alias) {
        this(DSL.name(alias), SOCIETY_MASTER);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.society_master</code> table reference
     */
    public SocietyMaster(Name alias) {
        this(alias, SOCIETY_MASTER);
    }

    /**
     * Create a <code>vendor_portal_pbx.society_master</code> table reference
     */
    public SocietyMaster() {
        this(DSL.name("society_master"), null);
    }

    public <O extends Record> SocietyMaster(Table<O> child, ForeignKey<O, SocietyMasterRecord> key) {
        super(child, key, SOCIETY_MASTER);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<SocietyMasterRecord> getPrimaryKey() {
        return Keys.KEY_SOCIETY_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SocietyMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<SocietyMasterRecord>>asList(Keys.KEY_SOCIETY_MASTER_PRIMARY);
    }

    @Override
    public SocietyMaster as(String alias) {
        return new SocietyMaster(DSL.name(alias), this);
    }

    @Override
    public SocietyMaster as(Name alias) {
        return new SocietyMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SocietyMaster rename(String name) {
        return new SocietyMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SocietyMaster rename(Name name) {
        return new SocietyMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, LocalDate, LocalDate, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
