/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.CertificateTypeMasterRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CertificateTypeMaster extends TableImpl<CertificateTypeMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.certificate_type_master</code>
     */
    public static final CertificateTypeMaster CERTIFICATE_TYPE_MASTER = new CertificateTypeMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CertificateTypeMasterRecord> getRecordType() {
        return CertificateTypeMasterRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.certificate_type_master.CERTIFICATE_TYPE_ID</code>.
     */
    public final TableField<CertificateTypeMasterRecord, Integer> CERTIFICATE_TYPE_ID = createField(DSL.name("CERTIFICATE_TYPE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.certificate_type_master.CERTIFICATE_NAME</code>.
     */
    public final TableField<CertificateTypeMasterRecord, String> CERTIFICATE_NAME = createField(DSL.name("CERTIFICATE_NAME"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>vendor_portal_pbx.certificate_type_master.CERTIFICATE_VALUE</code>.
     */
    public final TableField<CertificateTypeMasterRecord, String> CERTIFICATE_VALUE = createField(DSL.name("CERTIFICATE_VALUE"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>vendor_portal_pbx.certificate_type_master.STATUS</code>.
     */
    public final TableField<CertificateTypeMasterRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    private CertificateTypeMaster(Name alias, Table<CertificateTypeMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CertificateTypeMaster(Name alias, Table<CertificateTypeMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.certificate_type_master</code> table reference
     */
    public CertificateTypeMaster(String alias) {
        this(DSL.name(alias), CERTIFICATE_TYPE_MASTER);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.certificate_type_master</code> table reference
     */
    public CertificateTypeMaster(Name alias) {
        this(alias, CERTIFICATE_TYPE_MASTER);
    }

    /**
     * Create a <code>vendor_portal_pbx.certificate_type_master</code> table reference
     */
    public CertificateTypeMaster() {
        this(DSL.name("certificate_type_master"), null);
    }

    public <O extends Record> CertificateTypeMaster(Table<O> child, ForeignKey<O, CertificateTypeMasterRecord> key) {
        super(child, key, CERTIFICATE_TYPE_MASTER);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<CertificateTypeMasterRecord> getPrimaryKey() {
        return Keys.KEY_CERTIFICATE_TYPE_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CertificateTypeMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<CertificateTypeMasterRecord>>asList(Keys.KEY_CERTIFICATE_TYPE_MASTER_PRIMARY);
    }

    @Override
    public CertificateTypeMaster as(String alias) {
        return new CertificateTypeMaster(DSL.name(alias), this);
    }

    @Override
    public CertificateTypeMaster as(Name alias) {
        return new CertificateTypeMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateTypeMaster rename(String name) {
        return new CertificateTypeMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CertificateTypeMaster rename(Name name) {
        return new CertificateTypeMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
