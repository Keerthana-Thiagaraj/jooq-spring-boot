/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.FarmerMilkReportRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FarmerMilkReport extends TableImpl<FarmerMilkReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.farmer_milk_report</code>
     */
    public static final FarmerMilkReport FARMER_MILK_REPORT = new FarmerMilkReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FarmerMilkReportRecord> getRecordType() {
        return FarmerMilkReportRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.ID</code>.
     */
    public final TableField<FarmerMilkReportRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.FARMER_CODE</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> FARMER_CODE = createField(DSL.name("FARMER_CODE"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.MONTH</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> MONTH = createField(DSL.name("MONTH"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.FROM_DATE</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> FROM_DATE = createField(DSL.name("FROM_DATE"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.TO_DATE</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> TO_DATE = createField(DSL.name("TO_DATE"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.FILE_URL</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> FILE_URL = createField(DSL.name("FILE_URL"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>vendor_portal_pbx.farmer_milk_report.FILE_NAME</code>.
     */
    public final TableField<FarmerMilkReportRecord, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(45), this, "");

    private FarmerMilkReport(Name alias, Table<FarmerMilkReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private FarmerMilkReport(Name alias, Table<FarmerMilkReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.farmer_milk_report</code> table reference
     */
    public FarmerMilkReport(String alias) {
        this(DSL.name(alias), FARMER_MILK_REPORT);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.farmer_milk_report</code> table reference
     */
    public FarmerMilkReport(Name alias) {
        this(alias, FARMER_MILK_REPORT);
    }

    /**
     * Create a <code>vendor_portal_pbx.farmer_milk_report</code> table reference
     */
    public FarmerMilkReport() {
        this(DSL.name("farmer_milk_report"), null);
    }

    public <O extends Record> FarmerMilkReport(Table<O> child, ForeignKey<O, FarmerMilkReportRecord> key) {
        super(child, key, FARMER_MILK_REPORT);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public Identity<FarmerMilkReportRecord, Integer> getIdentity() {
        return (Identity<FarmerMilkReportRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FarmerMilkReportRecord> getPrimaryKey() {
        return Keys.KEY_FARMER_MILK_REPORT_PRIMARY;
    }

    @Override
    public List<UniqueKey<FarmerMilkReportRecord>> getKeys() {
        return Arrays.<UniqueKey<FarmerMilkReportRecord>>asList(Keys.KEY_FARMER_MILK_REPORT_PRIMARY);
    }

    @Override
    public FarmerMilkReport as(String alias) {
        return new FarmerMilkReport(DSL.name(alias), this);
    }

    @Override
    public FarmerMilkReport as(Name alias) {
        return new FarmerMilkReport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmerMilkReport rename(String name) {
        return new FarmerMilkReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FarmerMilkReport rename(Name name) {
        return new FarmerMilkReport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
