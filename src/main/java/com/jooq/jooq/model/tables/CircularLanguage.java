/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.CircularLanguageRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CircularLanguage extends TableImpl<CircularLanguageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.circular_language</code>
     */
    public static final CircularLanguage CIRCULAR_LANGUAGE = new CircularLanguage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CircularLanguageRecord> getRecordType() {
        return CircularLanguageRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.circular_language.ID</code>.
     */
    public final TableField<CircularLanguageRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>vendor_portal_pbx.circular_language.LANG_NAME</code>.
     */
    public final TableField<CircularLanguageRecord, String> LANG_NAME = createField(DSL.name("LANG_NAME"), SQLDataType.VARCHAR(50), this, "");

    private CircularLanguage(Name alias, Table<CircularLanguageRecord> aliased) {
        this(alias, aliased, null);
    }

    private CircularLanguage(Name alias, Table<CircularLanguageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_language</code> table reference
     */
    public CircularLanguage(String alias) {
        this(DSL.name(alias), CIRCULAR_LANGUAGE);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.circular_language</code> table reference
     */
    public CircularLanguage(Name alias) {
        this(alias, CIRCULAR_LANGUAGE);
    }

    /**
     * Create a <code>vendor_portal_pbx.circular_language</code> table reference
     */
    public CircularLanguage() {
        this(DSL.name("circular_language"), null);
    }

    public <O extends Record> CircularLanguage(Table<O> child, ForeignKey<O, CircularLanguageRecord> key) {
        super(child, key, CIRCULAR_LANGUAGE);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public Identity<CircularLanguageRecord, Integer> getIdentity() {
        return (Identity<CircularLanguageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CircularLanguageRecord> getPrimaryKey() {
        return Keys.KEY_CIRCULAR_LANGUAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CircularLanguageRecord>> getKeys() {
        return Arrays.<UniqueKey<CircularLanguageRecord>>asList(Keys.KEY_CIRCULAR_LANGUAGE_PRIMARY);
    }

    @Override
    public CircularLanguage as(String alias) {
        return new CircularLanguage(DSL.name(alias), this);
    }

    @Override
    public CircularLanguage as(Name alias) {
        return new CircularLanguage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularLanguage rename(String name) {
        return new CircularLanguage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CircularLanguage rename(Name name) {
        return new CircularLanguage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
