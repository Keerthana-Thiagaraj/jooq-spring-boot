/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.VendorPortalPbx;
import com.jooq.jooq.model.tables.records.FtpConfigRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FtpConfig extends TableImpl<FtpConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>vendor_portal_pbx.ftp_config</code>
     */
    public static final FtpConfig FTP_CONFIG = new FtpConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FtpConfigRecord> getRecordType() {
        return FtpConfigRecord.class;
    }

    /**
     * The column <code>vendor_portal_pbx.ftp_config.FTP_CONFIG_ID</code>.
     */
    public final TableField<FtpConfigRecord, Integer> FTP_CONFIG_ID = createField(DSL.name("FTP_CONFIG_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.IP</code>.
     */
    public final TableField<FtpConfigRecord, String> IP = createField(DSL.name("IP"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.USERNAME</code>.
     */
    public final TableField<FtpConfigRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.PASSWORD</code>.
     */
    public final TableField<FtpConfigRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.MENU_TYPE</code>.
     */
    public final TableField<FtpConfigRecord, String> MENU_TYPE = createField(DSL.name("MENU_TYPE"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.CONFIG_TYPE</code>.
     */
    public final TableField<FtpConfigRecord, String> CONFIG_TYPE = createField(DSL.name("CONFIG_TYPE"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.URL</code>.
     */
    public final TableField<FtpConfigRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.STATUS</code>.
     */
    public final TableField<FtpConfigRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.CREATED_BY</code>.
     */
    public final TableField<FtpConfigRecord, Integer> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.CREATED_ON</code>.
     */
    public final TableField<FtpConfigRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.LAST_CHANGED_BY</code>.
     */
    public final TableField<FtpConfigRecord, Integer> LAST_CHANGED_BY = createField(DSL.name("LAST_CHANGED_BY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>vendor_portal_pbx.ftp_config.LAST_CHANGED_ON</code>.
     */
    public final TableField<FtpConfigRecord, LocalDateTime> LAST_CHANGED_ON = createField(DSL.name("LAST_CHANGED_ON"), SQLDataType.LOCALDATETIME(0), this, "");

    private FtpConfig(Name alias, Table<FtpConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private FtpConfig(Name alias, Table<FtpConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.ftp_config</code> table reference
     */
    public FtpConfig(String alias) {
        this(DSL.name(alias), FTP_CONFIG);
    }

    /**
     * Create an aliased <code>vendor_portal_pbx.ftp_config</code> table reference
     */
    public FtpConfig(Name alias) {
        this(alias, FTP_CONFIG);
    }

    /**
     * Create a <code>vendor_portal_pbx.ftp_config</code> table reference
     */
    public FtpConfig() {
        this(DSL.name("ftp_config"), null);
    }

    public <O extends Record> FtpConfig(Table<O> child, ForeignKey<O, FtpConfigRecord> key) {
        super(child, key, FTP_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return VendorPortalPbx.VENDOR_PORTAL_PBX;
    }

    @Override
    public UniqueKey<FtpConfigRecord> getPrimaryKey() {
        return Keys.KEY_FTP_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<FtpConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<FtpConfigRecord>>asList(Keys.KEY_FTP_CONFIG_PRIMARY);
    }

    @Override
    public FtpConfig as(String alias) {
        return new FtpConfig(DSL.name(alias), this);
    }

    @Override
    public FtpConfig as(Name alias) {
        return new FtpConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FtpConfig rename(String name) {
        return new FtpConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FtpConfig rename(Name name) {
        return new FtpConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, String, Integer, LocalDateTime, Integer, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
