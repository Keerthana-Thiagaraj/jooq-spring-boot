/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model.tables;


import com.jooq.jooq.model.Indexes;
import com.jooq.jooq.model.JooqDemo;
import com.jooq.jooq.model.Keys;
import com.jooq.jooq.model.tables.records.FieldValidationMasterRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldValidationMaster extends TableImpl<FieldValidationMasterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_demo.field_validation_master</code>
     */
    public static final FieldValidationMaster FIELD_VALIDATION_MASTER = new FieldValidationMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldValidationMasterRecord> getRecordType() {
        return FieldValidationMasterRecord.class;
    }

    /**
     * The column <code>jooq_demo.field_validation_master.validation_id</code>.
     */
    public final TableField<FieldValidationMasterRecord, Integer> VALIDATION_ID = createField(DSL.name("validation_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_demo.field_validation_master.field_id</code>.
     */
    public final TableField<FieldValidationMasterRecord, Integer> FIELD_ID = createField(DSL.name("field_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>jooq_demo.field_validation_master.validation_type</code>.
     */
    public final TableField<FieldValidationMasterRecord, String> VALIDATION_TYPE = createField(DSL.name("validation_type"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>jooq_demo.field_validation_master.validation_format</code>.
     */
    public final TableField<FieldValidationMasterRecord, String> VALIDATION_FORMAT = createField(DSL.name("validation_format"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>jooq_demo.field_validation_master.validation_msg</code>.
     */
    public final TableField<FieldValidationMasterRecord, String> VALIDATION_MSG = createField(DSL.name("validation_msg"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>jooq_demo.field_validation_master.status</code>.
     */
    public final TableField<FieldValidationMasterRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45), this, "");

    private FieldValidationMaster(Name alias, Table<FieldValidationMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldValidationMaster(Name alias, Table<FieldValidationMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_demo.field_validation_master</code> table reference
     */
    public FieldValidationMaster(String alias) {
        this(DSL.name(alias), FIELD_VALIDATION_MASTER);
    }

    /**
     * Create an aliased <code>jooq_demo.field_validation_master</code> table reference
     */
    public FieldValidationMaster(Name alias) {
        this(alias, FIELD_VALIDATION_MASTER);
    }

    /**
     * Create a <code>jooq_demo.field_validation_master</code> table reference
     */
    public FieldValidationMaster() {
        this(DSL.name("field_validation_master"), null);
    }

    public <O extends Record> FieldValidationMaster(Table<O> child, ForeignKey<O, FieldValidationMasterRecord> key) {
        super(child, key, FIELD_VALIDATION_MASTER);
    }

    @Override
    public Schema getSchema() {
        return JooqDemo.JOOQ_DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FIELD_VALIDATION_MASTER_FK_FIELD_ID_IDX);
    }

    @Override
    public Identity<FieldValidationMasterRecord, Integer> getIdentity() {
        return (Identity<FieldValidationMasterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FieldValidationMasterRecord> getPrimaryKey() {
        return Keys.KEY_FIELD_VALIDATION_MASTER_PRIMARY;
    }

    @Override
    public List<UniqueKey<FieldValidationMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldValidationMasterRecord>>asList(Keys.KEY_FIELD_VALIDATION_MASTER_PRIMARY);
    }

    @Override
    public List<ForeignKey<FieldValidationMasterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FieldValidationMasterRecord, ?>>asList(Keys.FK_FIELD_ID);
    }

    private transient FieldMaster _fieldMaster;

    public FieldMaster fieldMaster() {
        if (_fieldMaster == null)
            _fieldMaster = new FieldMaster(this, Keys.FK_FIELD_ID);

        return _fieldMaster;
    }

    @Override
    public FieldValidationMaster as(String alias) {
        return new FieldValidationMaster(DSL.name(alias), this);
    }

    @Override
    public FieldValidationMaster as(Name alias) {
        return new FieldValidationMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldValidationMaster rename(String name) {
        return new FieldValidationMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldValidationMaster rename(Name name) {
        return new FieldValidationMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
