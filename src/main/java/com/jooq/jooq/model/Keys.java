/*
 * This file is generated by jOOQ.
 */
package com.jooq.jooq.model;


import com.jooq.jooq.model.tables.CityMaster;
import com.jooq.jooq.model.tables.CountryMaster;
import com.jooq.jooq.model.tables.CustomerMaster;
import com.jooq.jooq.model.tables.FieldMaster;
import com.jooq.jooq.model.tables.FieldTabMaster;
import com.jooq.jooq.model.tables.FieldValidationMaster;
import com.jooq.jooq.model.tables.StateMaster;
import com.jooq.jooq.model.tables.UserMaster;
import com.jooq.jooq.model.tables.records.CityMasterRecord;
import com.jooq.jooq.model.tables.records.CountryMasterRecord;
import com.jooq.jooq.model.tables.records.CustomerMasterRecord;
import com.jooq.jooq.model.tables.records.FieldMasterRecord;
import com.jooq.jooq.model.tables.records.FieldTabMasterRecord;
import com.jooq.jooq.model.tables.records.FieldValidationMasterRecord;
import com.jooq.jooq.model.tables.records.StateMasterRecord;
import com.jooq.jooq.model.tables.records.UserMasterRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * jooq_demo.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CityMasterRecord> KEY_CITY_MASTER_PRIMARY = Internal.createUniqueKey(CityMaster.CITY_MASTER, DSL.name("KEY_city_master_PRIMARY"), new TableField[] { CityMaster.CITY_MASTER.ID }, true);
    public static final UniqueKey<CountryMasterRecord> KEY_COUNTRY_MASTER_PRIMARY = Internal.createUniqueKey(CountryMaster.COUNTRY_MASTER, DSL.name("KEY_country_master_PRIMARY"), new TableField[] { CountryMaster.COUNTRY_MASTER.ID }, true);
    public static final UniqueKey<CustomerMasterRecord> KEY_CUSTOMER_MASTER_PRIMARY = Internal.createUniqueKey(CustomerMaster.CUSTOMER_MASTER, DSL.name("KEY_customer_master_PRIMARY"), new TableField[] { CustomerMaster.CUSTOMER_MASTER.COMP_CODE, CustomerMaster.CUSTOMER_MASTER.CUSTOMER_CODE }, true);
    public static final UniqueKey<FieldMasterRecord> KEY_FIELD_MASTER_PRIMARY = Internal.createUniqueKey(FieldMaster.FIELD_MASTER, DSL.name("KEY_Field_master_PRIMARY"), new TableField[] { FieldMaster.FIELD_MASTER.SNO }, true);
    public static final UniqueKey<FieldTabMasterRecord> KEY_FIELD_TAB_MASTER_PRIMARY = Internal.createUniqueKey(FieldTabMaster.FIELD_TAB_MASTER, DSL.name("KEY_field_tab_master_PRIMARY"), new TableField[] { FieldTabMaster.FIELD_TAB_MASTER.TAB_ID }, true);
    public static final UniqueKey<FieldValidationMasterRecord> KEY_FIELD_VALIDATION_MASTER_PRIMARY = Internal.createUniqueKey(FieldValidationMaster.FIELD_VALIDATION_MASTER, DSL.name("KEY_field_validation_master_PRIMARY"), new TableField[] { FieldValidationMaster.FIELD_VALIDATION_MASTER.VALIDATION_ID }, true);
    public static final UniqueKey<StateMasterRecord> KEY_STATE_MASTER_PRIMARY = Internal.createUniqueKey(StateMaster.STATE_MASTER, DSL.name("KEY_state_master_PRIMARY"), new TableField[] { StateMaster.STATE_MASTER.ID }, true);
    public static final UniqueKey<UserMasterRecord> KEY_USER_MASTER_PRIMARY = Internal.createUniqueKey(UserMaster.USER_MASTER, DSL.name("KEY_user_master_PRIMARY"), new TableField[] { UserMaster.USER_MASTER.USER_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FieldMasterRecord, FieldTabMasterRecord> FK_FIELD_MASTER = Internal.createForeignKey(FieldMaster.FIELD_MASTER, DSL.name("fk_field_master"), new TableField[] { FieldMaster.FIELD_MASTER.TAB_ID }, Keys.KEY_FIELD_TAB_MASTER_PRIMARY, new TableField[] { FieldTabMaster.FIELD_TAB_MASTER.TAB_ID }, true);
    public static final ForeignKey<FieldValidationMasterRecord, FieldMasterRecord> FK_FIELD_ID = Internal.createForeignKey(FieldValidationMaster.FIELD_VALIDATION_MASTER, DSL.name("FK_FIELD_ID"), new TableField[] { FieldValidationMaster.FIELD_VALIDATION_MASTER.FIELD_ID }, Keys.KEY_FIELD_MASTER_PRIMARY, new TableField[] { FieldMaster.FIELD_MASTER.SNO }, true);
    public static final ForeignKey<StateMasterRecord, CountryMasterRecord> FK_COUNTRY_MASTER = Internal.createForeignKey(StateMaster.STATE_MASTER, DSL.name("FK_COUNTRY_MASTER"), new TableField[] { StateMaster.STATE_MASTER.COUNTRY_CODE }, Keys.KEY_COUNTRY_MASTER_PRIMARY, new TableField[] { CountryMaster.COUNTRY_MASTER.ID }, true);
}
